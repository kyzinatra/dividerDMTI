import { divide } from "./lib/Divider";
import { Matrix } from "./lib/Matrix";
import { asString } from "./lib/utils";
const g = [1,0,0,0,1,0,1,1,1] as (0|1)[];
const b = [1,0,0,0,0,1,0,1,0,1,0,0,1,0,1] as (0|1)[];
const c = [1,0,0,0,1,0,1,0,0] as (0|1)[];
const k = [1,1, ...Array.from({length: 13}).fill(0)] as (0|1)[];
// [1,1,0,1,0,1,1,1,1,0,0,0,1,0]

divide(b,g)

// // const f = [1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1];
// // const fi = [1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0];

// // const a = [1, 1, 0, 1] as (0 | 1)[];
// // const b = [1, 1, 0] as (0 | 1)[];

// // console.log(asString(a));
// // console.log(asString(b));
// // console.log("\n\n\n");
// // const { rest, quotient } = divide(a, b);

// const M = new Matrix(
//   [
//     [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1],
//     [0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1],
//     [0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1],
//     [0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0],

//     [0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0],
//     [0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1],
//     [0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0],
//     [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0],

//     [0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0],
//     [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1],
//     [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0],
//     [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1],
//     [0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1],
//   ],
//   2
// );

// M.gaussMethod();
// M.add(12, 11);
// M.add(12, 8);
// M.add(12, 6);
// M.add(12, 1);
// M.add(12, 2);

// M.add(11, 1);
// M.add(11, 2);
// M.add(11, 3);
// M.add(11, 6);
// M.add(11, 9);
// M.add(11, 7);
// M.add(11, 10);

// M.add(9, 8);
// M.add(9, 6);
// M.add(9, 5);
// M.add(9, 3);
// M.add(9, 2);
// M.add(9, 4);
// M.add(9, 3);

// M.add(8, 6);
// M.add(8, 3);
// M.add(8, 2);

// M.add(9, 2);
// M.add(9, 3);
// M.add(1, 4);
// M.add(1, 8);

// M.swap(10, 12);

// M.add(8, 7);
// M.add(8, 5);

// M.swap(8, 10);
// M.swap(1, 8);

// M.excludeMinusZero();
// console.table(M.matrix);
// console.log(JSON.stringify(M.matrix).replace(/\[/g, "{").replace(/\]/g, "}"));
